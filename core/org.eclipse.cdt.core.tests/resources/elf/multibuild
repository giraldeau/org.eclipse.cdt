#!/usr/bin/env python3

import os
import re
import subprocess

spec_list = ["linux-g++-32",
             "linux-g++-64" ]

re_fname = re.compile('([\w]+).pro$')

def build_one(pro_path, spec):
    pro_name = os.path.basename(pro_path)
    match = re_fname.match(pro_name)
    if not match:
        raise Exception('invalid project file name: ' + repr(pro_name))
    src_dir = os.path.dirname(pro_path)
    base_dir = os.path.dirname(src_dir)
    dest_dir = "build_" + spec
    build_dir = os.path.join(base_dir, dest_dir)


    # create output directory based on the spec name
    if not os.path.exists(build_dir):
        os.makedirs(build_dir)
    old_dir = os.getcwd()
    cmd_qmake = ["qmake", "-spec", spec, "CONFIG+=debug", pro_path]
    cmd_clean = ["make", "clean"]
    cmd_make = ["make"]
    exception = None
    with open("build.log", "w") as log:
        print("build start %s" % (spec))
        log.write("build start %s\n" % (spec))
        log.flush()
        try:
            # call qmake with the right options
            os.chdir(build_dir)
            subprocess.check_call(cmd_qmake, stdout=log, stderr=log)
            # call make
            subprocess.check_call(cmd_clean, stdout=log, stderr=log)
            subprocess.check_call(cmd_make, stdout=log, stderr=log)
        except (subprocess.CalledProcessError, FileNotFoundError) as e:
            msg = "build failed: " + repr(e)
            log.write(msg)
            exception = Exception("build failed: %s %s" % (spec, repr(e)))
        finally:
            os.chdir(old_dir)
        log.write("build finished %s\n" % (spec))
    if exception:
        raise exception

def build_all(pro_path, specs):
    exception = None
    for spec in specs:
        try:
            build_one(pro_path, spec)
        except Exception as e:
            print(e)
            exception = e
        if exception:
            break
    
if __name__=="__main__":
    
    import argparse
    import sys
    
    parser = argparse.ArgumentParser(description='Build project for multiple targets')
    
    parser.add_argument('projects', type=str, nargs='+', help='path to .pro file')
    parser.add_argument('--spec', choices=spec_list, default=None, required=False)
    
    args = parser.parse_args()
    
    for project in args.projects:
        if not os.path.exists(project):
            print("Error: File not found: " + repr(project))
            sys.exit(1)

    if args.spec:
        args.spec = [args.spec]
    else:
        args.spec = spec_list

    for project in args.projects:
        pro_path = os.path.abspath(project)
        build_all(pro_path, args.spec)
